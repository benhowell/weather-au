#!/bin/bash

#TODO: move to long form fcast

# info
# BOM OBS data is updated every 10 minutes.

# symbols
DEGREES=$'\xc2\xb0'

# end-points
NSW_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDN60920.xml
NSW_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDN11020.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDN11060.xml

TAS_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDT60920.xml
TAS_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDT16000.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDT16710.xml

NT_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDD60920.xml
NT_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDD10207.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDD10207.xml

QLD_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDQ60920.xml
QLD_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDQ10606.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDQ11295.xml

SA_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDS60920.xml
SA_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDS11055.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDS10044.xml

VIC_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDV60920.xml
VIC_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDV10750.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDV10753.xml

WA_OBS=ftp://ftp.bom.gov.au/anon/gen/fwo/IDW60920.xml
WA_FCAST=ftp://ftp.bom.gov.au/anon/gen/fwo/IDW13010.xml
# ftp://ftp.bom.gov.au/anon/gen/fwo/IDW14199.xml

# cached files
# if file cached, return it
# else curl end-point, cache file, return it
function get_file() {
    CACHE="$1_C"
    RES="${!CACHE}"
    if [ ${RES:+1} ]; then
        echo "$RES"
    else
        printf -v "$CACHE" "%s" "$(curl -s ${!1})"
        echo "${!CACHE}"
    fi
}


# pretty print header
function print_header() {
    rl="$(echo -n $1 | wc -c)"
    ll="$(echo -n $2 | wc -c)"
    sl="$(echo -n $3 | wc -c)"

    printf %"s" "+";
    for i in $(seq 1 $(($ll + $rl + $sl + 4))); do printf %"s" "-"; done;
    printf %"s\n" "+"
    printf %"s\n" "| $1 $3 $2 |"
    printf %"s" "+";
    for i in $(seq 1 $(($ll + $rl + $sl + 4))); do printf %"s" "-"; done;
    printf %"s\n" "+"
}


#TODO: allow format param to show details for each station
# stations
function list_stations() {
    DATA="$(echo $1 | xpath -q -e '//station/@description')"
    if [ $2 ]; then
        print_header "Stations"
    fi
    for i in "$DATA"
    do
        #strip leading text and double quotes
        echo "$i" | sed -e 's/\sdescription=//g' -e 's/\"//g'
    done
    if [ $2 ]; then
        printf %"s\n"
    fi
}


#TODO: allow format param to show details for each district
# forecast districts
function list_forecast_districts() {
    DATA="$(echo $1 | xpath -q -e '//area[@type='"'public-district'"']/@description')"
    if [ $2 ]; then
        print_header "Forecast districts"
    fi
    for i in "$DATA"
    do
        #strip leading text and double quotes
        echo "$i" | sed -e 's/\sdescription=//g' -e 's/\"//g'
    done
    if [ $2 ]; then
        printf %"s\n"
    fi
}


#TODO: allow format param to show details for each location
# forecast locations
function list_forecast_locations() {
    DATA="$(echo $1 | xpath -q -e '//area[@type='"'location'"']/@description')"
    if [ $2 ]; then
        print_header "Forecast locations"
    fi
    for i in "$DATA"
    do
        #strip leading text and double quotes
        echo "$i" | sed -e 's/\sdescription=//g' -e 's/\"//g'
    done
    if [ $2 ]; then
        printf %"s\n"
    fi
}

#TODO: pass in format????
# synoptic forecast (region)
function forecast_synoptic() {
    DATA="$(echo $1 | xpath -q -e '//area[@aac='"'$2'"']')"
    l="$(echo $DATA | xpath -q -e '//area/@description')"
    #strip leading text and double quotes
    location="$(echo "$l" | sed -e 's/\sdescription=//g' -e 's/\"//g')"
    if [ $3 ]; then
        print_header "Synoptic forecast" "$location" "-"
    fi
    printf %"s\n" "$(echo $DATA | xpath -q -e '//text[@type='"'synoptic_situation'"']/text()')"
    if [ $3 ]; then printf %"s\n"; fi
}


#TODO: pass in index [0..3] (0 today, 1 tomorrow, etc)
#TODO: pass in format????
# district forecast
function forecast_district() {
    DATA="$(echo $1 | xpath -q -e '//area[@description='"'$2'"']/forecast-period[@index='"'0'"']')"
    #strip leading text and double quotes
    location="$(echo "$2" | sed -e 's/\sdescription=//g' -e 's/\"//g')"
    if [ $3 ]; then
        print_header "District forecast" "$location" "-"
    fi
    printf %"s\n" "$(echo $DATA | xpath -q -e '//text[@type='"'forecast'"']/text()')"
    if [ $3 ]; then printf %"s\n"; fi
}


#FIXME: it appears that there sometimes isn't an index at 0 (perhaps after a certain time at night?)
#TODO: pass in index [0..3] (0 today, 1 tomorrow, etc)
#TODO: pass in format
# location forecast
function forecast_location() {
    DATA="$(echo $1 | xpath -q -e '//area[@description='"'$2'"']/forecast-period[@index='"'0'"']')"
    #strip leading text and double quotes
    location="$(echo "$2" | sed -e 's/\sdescription=//g' -e 's/\"//g')"
    precis="$(echo $DATA | xpath -q -e '//text[@type='"'precis'"']/text()')"
    temp="$(echo $DATA | xpath -q -e '//element[@type='"'air_temperature_maximum'"']/text()')"
    if [ $3 ]; then
        print_header "Location forecast" "$location" "-"
    fi
    printf "%s %s%s%s\n" "$precis" "$temp" "$DEGREES" "C"
    if [ $3 ]; then printf %"s\n"; fi
}


function extract_var() {
    echo $1 | xpath -q -e '//element[@type='"'$2'"']/text()'
}


#TODO: optionally get fcast data if requested in format string
function obs_station() {
    declare -A obs #bash 4
    OBS_F=$(get_file "$1"_OBS)
    DATA="$(echo $OBS_F | xpath -q -e '//station[@description='"'$2'"']')"

    #DIST_E="$(echo $DATA | xpath -q -e '//station/@forecast-district-id')"
    #FCAST_F=$(get_file "$1"_FCAST)
    #FCAST_DIST="$(echo $DIST_E | sed -e 's/\sforecast-district-id=//g' -e 's/\"//g')"
    #echo $FCAST_DIST

    #raw XML
    #printf "%s\n" $DATA




    obs=(
        #["a"]=forecast precis # not observation!
        #["A"]=forecast max temp # not observation!

        ["c"]="$(extract_var "$DATA" cloud)"                   # text
        ["C"]="$(extract_var "$DATA" cloud_oktas)"             # ?
        ["d"]="$(extract_var "$DATA" dew_point)"               # C
        ["D"]="$(extract_var "$DATA" wind_dir)"                # direction
        ["e"]="$(extract_var "$DATA" wind_dir_deg)"            # degrees
        ["E"]="$(extract_var "$DATA" maximum_gust_kmh)"        # km/h
        ["f"]="$(extract_var "$DATA" maximum_gust_spd)"        # knots
        ["F"]="$(extract_var "$DATA" maximum_gust_dir)"        # direction
        ["g"]="$(extract_var "$DATA" gust_kmh)"                # km/h
        ["G"]="$(extract_var "$DATA" wind_gust_spd)"           # knots
        ["h"]="$(extract_var "$DATA" rel-humidity)"            # %

        ["m"]="$(extract_var "$DATA" minimum_air_temperature)" # C
        ["M"]="$(extract_var "$DATA" maximum_air_temperature)" # C

        ["O"]="$(extract_var "$DATA" qnh_pres)"                # hPa
        ["p"]="$(extract_var "$DATA" pres)"                    # hPa
        ["P"]="$(extract_var "$DATA" msl_pres)"                # hPa

        ["q"]="$(extract_var "$DATA" rain_hr)"                 # mm
        ["Q"]="$(extract_var "$DATA" rain_ten)"                # mm
        ["r"]="$(extract_var "$DATA" rainfall)"                # mm
        ["R"]="$(extract_var "$DATA" rainfall_24hr)"           # mm
        ["s"]="$(extract_var "$DATA" wind_spd_kmh)"            # km/h
        ["S"]="$(extract_var "$DATA" wind_spd)"                # knots
        ["t"]="$(extract_var "$DATA" air_temperature)"         # C
        ["T"]="$(extract_var "$DATA" apparent_temp)"           # C
        ["u"]="$(extract_var "$DATA" delta_t)"                 # C

        ["v"]="$(extract_var "$DATA" vis_km)"                  # km

        ["z"]="$(echo $DATA | xpath -q -e 'string(//period/@time-local)')"
        ["Z"]="$(echo $DEGREES)"
    )

    #echo "${obs[@]}"
    printf "%s %'.0f %'.0f %'.0f%sC" "mac" "${obs[M]}" "${obs[T]}" "${obs[t]}" "${obs[Z]}"
}



for ARG in "$@"
do
    K=$(echo $ARG | cut -f1 -d=)
    V=$(echo $ARG | cut -f2 -d=)
    case "$K" in
        --pretty)              pretty=true;;
        --stations)            stations=true;;
        --state)               state="$V";;

        --forecast-districts)  forecast_districts=true;;
        --forecast-locations)  forecast_locations=true;;
        --forecast-synoptic)   forecast_synoptic=true;;
        --forecast-district)   forecast_district="$V";;
        --forecast-location)   forecast_location="$V";;

        --station)             station="$V";;

        --format)              format="$V";;
        *)
    esac
done



# list stations
if [ "$stations" = true ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_OBS)
    if [ ${pretty:+1} ]; then
        list_stations "$f" "$pretty"
    else
        list_stations "$f"
    fi
fi


# list forecast districts
if [ "$forecast_districts" = true ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_FCAST)
    if [ ${pretty:+1} ]; then
        list_forecast_districts "$f" "$pretty"
    else
        list_forecast_districts "$f"
    fi
fi


# list forecast locations
if [ "$forecast_locations" = true ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_FCAST)
    if [ ${pretty:+1} ]; then
        list_forecast_locations "$f" "$pretty"
    else
        list_forecast_locations "$f"
    fi
fi


# synoptic forecast
if [ "$forecast_synoptic" = true ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_FCAST)
    if [ ${pretty:+1} ]; then
        forecast_synoptic "$f" "$state"_FA001 "$pretty"
    else
        forecast_synoptic "$f" "$state"_FA001
    fi
fi


# district forecast
if [ ${forecast_district:+1} ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_FCAST)
    if [ ${pretty:+1} ]; then
        forecast_district "$f" "$forecast_district" "$pretty"
    else
        forecast_district "$f" "$forecast_district"
    fi
fi


# location forecast
if [ ${forecast_location:+1} ] && [ ${state:+1} ]; then
    f=$(get_file "$state"_FCAST)
    if [ ${pretty:+1} ]; then
        forecast_location "$f" "$forecast_location" "$pretty"
    else
        forecast_location "$f" "$forecast_location"
    fi
fi


# station observations
if [ ${station:+1} ] && [ ${state:+1} ]; then
    if [ ${pretty:+1} ]; then
        obs_station "$state" "$station" "$pretty"
    else
        obs_station "$state" "$station" "$format"
    fi
fi



# --state (required)
# Usage: --state=TAS
# Options: [NSW,TAS,NT,QLD,SA,VIC,WA]

# --stations
# Usage: --stations

# --forecast-districts
# Usage: --forecast-districts

# --forecast-locations
# Usage: --forecast-locations

# --forecast-synoptic
# Usage: --forecast-synoptic

# --pretty
# Usage: --pretty

# --format
# Usage: --format="temp-apparent: %a%DC temp-actual:%A%DC "








#STATION_FCAST_TODAY="$(echo $FCAST | xpath -q -e '//area[@description='"'Hobart'"']/forecast-period[@index='"'0'"']')"
#STATION_FCAST_TOMORROW="$(echo $FCAST | xpath -q -e '//area[@description='"'Hobart'"']/forecast-period[@index='"'1'"']')"
#STATION_FCAST_OVERMORROW="$(echo $FCAST | xpath -q -e '//area[@description='"'Hobart'"']/forecast-period[@index='"'2'"']')"

#temp_max_fcast="$(echo $STATION_FCAST_TODAY | xpath -q -e 'string(//element[@type='"'air_temperature_maximum'"'])')"
#echo $temp_max_fcast
#precis_fcast="$(echo $STATION_FCAST_TODAY | xpath -q -e 'string(//text[@type='"'precis'"'])')"
#echo $precis_fcast

#echo $STATION_FCAST_TODAY
#echo $STATION_FCAST_TOMORROW
#echo $STATION_FCAST_OVERMORROW



#FCAST="$(xpath -q -e '//area[@description='"'Hobart'"']/forecast-period' test-forecast.xml)"
#FCAST="$(xpath -q -e '//area[@description='"'Hobart'"']/forecast-period[@index='"'0'"']' test-forecast.xml)"
#echo $FCAST

#fcast_today="$(echo $FCAST | xpath -q -e '//forecast-period[@index='"'0'"']')"
#echo $fcast_today

#temp_fcast_today="$(echo $FCAST | xpath -q -e '//element[@type='"'air_temperature_maximum'"']/text()')"
#echo $temp_fcast_today
#precis_fcast_today="$(echo $FCAST | xpath -q -e '//text[@type='"'precis'"']/text()')"
#echo $precis_fcast_today
